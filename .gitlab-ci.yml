---
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  # Docker images to use for jdk8 / jdk10
  MAVEN_IMAGE_JDK8: registry.gitlab.com/lttng/lttng-scope/lttng-scope/maven:3.5-jdk-8-javafx
  MAVEN_IMAGE_JDK10: registry.gitlab.com/lttng/lttng-scope/lttng-scope/maven:3.5-jdk-10-javafx

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

before_script:
  - 'export DISPLAY=:99.0'
  - 'Xvfb :99 -screen 0 1024x768x16 &'
  - 'sleep 3' # give xvfb some time to start

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
.validate: &validate
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS test-compile'

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# Validate merge requests using JDK8
validate:jdk8:
  <<: *validate
  image: $MAVEN_IMAGE_JDK8

# Validate merge requests using JDK10
.validate:jdk10:
  <<: *validate
  image: $MAVEN_IMAGE_JDK10

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify
  image: $MAVEN_IMAGE_JDK8

# Verify merge requests using JDK10
.verify:jdk10:
  <<: *verify
  image: $MAVEN_IMAGE_JDK10

# For `master` branch run `mvn deploy` automatically.
# Here you need to decide whether you want to use JDK7 or 8.
# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.
# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.
# See https://maven.apache.org/settings.html
deploy:jdk8:
  # Use stage test here, so the pages job may later pickup the created site.
  stage: test
  # Run verify at the moment, we might deploy in the future
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
    - 'bash <(curl -s https://codecov.io/bash)'
  only:
    - master
  # Archive up the built documentation site.
  #artifacts:
  #  paths:
  #  - target/staging
  image: $MAVEN_IMAGE_JDK8
